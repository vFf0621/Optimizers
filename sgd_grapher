#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Nov 22 19:24:26 2020

@author: fguan
"""
import matplotlib.pyplot as plt

import torch
from torch import optim

def func(x):
    return torch.sin(x)

def funcR3(x, y):
    return torch.sin(x * y)

def sgd(func, x, target, lr, iteration):
    lr = torch.tensor(lr, requires_grad=True)
    target = torch.tensor(target, requires_grad=True)
    for i in range(iteration):
        x = torch.tensor(x, requires_grad=True)
        evaluate = (target - func(x)) ** 2
        evaluate.backward()
        ddx = x.grad
        x = x - ddx * lr
        plt.plot(i, abs(ddx.item()), 'ro')
    return x.item()

def sgd_m(func, x, target, lr, iteration, 
        b = torch.tensor(0.9, requires_grad=True)):
    lr = torch.tensor(lr, requires_grad=True)
    target = torch.tensor(target, requires_grad=True)
    vx = torch.tensor(0.)
    for i in range(iteration):
        x = torch.tensor(x, requires_grad=True)
        evaluate = (target - func(x)) ** 2
        evaluate.backward()
        ddx = x.grad
        ddx = vx * b + (torch.tensor(1., requires_grad=True) - b) * ddx
        x = x - ddx * lr
        vx = ddx
        plt.plot(i, abs(ddx.item()), 'ro')
    return x.item()

def sgd_m_R3(funcR3, x, y, target, lr, iteration, b = 0.9):
    lr = torch.tensor(lr, requires_grad=True)
    target = torch.tensor(target, requires_grad=True)
    vx = torch.tensor(0.)
    vy = torch.tensor(0.)
    for i in range(iteration):
        x = torch.tensor(x, requires_grad=True)
        y = torch.tensor(y, requires_grad=True)
        cost = (target - funcR3(x, y)) ** 2
        cost.backward(retain_graph=True)
        ddx = x.grad
        ddy = y.grad
        ddx = vx * b + (torch.tensor(1., requires_grad=True) - b) * ddx
        ddy = vy * b + (torch.tensor(1., requires_grad=True) - b) * ddy
        x = x - lr * ddx
        y = y - lr * ddy
        plt.plot(i, abs(ddx.item()), "ro")
        vx = ddx
        vy = ddy
    return x.item(), y.item()
